<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- id是可以成为statument的id -->
<!-- parameterType:输入的参数类型 -->
<!-- resultType:返回的参数类型 -->
<!-- 在 映射文件中配置很多sql语句 -->
<!-- 需求：通过id查询用户表的记录 -->
<!-- 通过 select执行数据库查询 id：标识 映射文件中的 sql 将sql语句封装到mappedStatement对象中，所以将id称为statement的id 
	parameterType：指定输入 参数的类型，这里指定int型 #{}表示一个占位符号 #{id}：其中的id表示接收输入 的参数，参数名称就是id，如果输入 
				       参数是简单类型，#{}中的参数名可以任意，可以value或其它名称 
	resultType：指定sql输出结果 的所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象。 -->

<mapper namespace="test">

	<select id="findUserById" parameterType="int"
		resultType="com.company.mybatis.pojo.User">
		SELECT * FROM USER WHERE id = #{id}
	</select>
	
	<!-- ${}就是不加任何修饰的拼接字符串 ,其值只能是value,但是会出现SQL注入 -->
	<select id="findUserByName" parameterType="String" resultType="com.company.mybatis.pojo.User">
		SELECT * FROM USER WHERE username LIKE '%${value}%';
	</select>
	
	<!-- 插入一个用户 -->
	<!-- parameterType:因为本质插入的是一个对象，因此参数类型设置成User类型即可 -->
	<!-- 注意：sql语句最后 不要加分号，而且没有返回值 -->
	<insert id="insertUser" parameterType="com.company.mybatis.pojo.User">
		<!-- 在主键自增的情况下，如何获取最新插入的数据的主键值 -->
		<!-- keyProperty:主键的名字 -->
		<!-- order：执行的顺序，相对于insert语句而言 -->
		<!-- resultType:查询结果的返回值 -->
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			SELECT LAST_INSERT_ID()
		</selectKey>
		INSERT INTO USER (username,birthday,sex,address) VALUES (#{username},#{birthday},#{sex},#{address})
		 
	</insert>
	
	
	<!-- 由于测试非自增主键的情况 -->
	<insert id="insertUser1" parameterType="com.company.mybatis.pojo.User1">
		<!-- mysql中，使用uuid作为主键 -->
		<selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
			SELECT UUID()
		</selectKey>
		INSERT INTO user1 (id,username,birthday,sex,address) VALUES (#{id},#{username},#{birthday},#{sex},#{address})
	</insert>
	
	
	<!-- 根据Id删除用户 -->
	<delete id="deleteUser" parameterType="int">
		delete from user where id = #{id}
	</delete>
	
	<!-- 更新用户 -->
	<!-- parameterType:传递user对象，因为其中包含了一个对象的信息 ，注意：id必须存在-->
	<!-- #{id}是输入的User对象的id值 -->
	<update id="updateUser" parameterType="com.company.mybatis.pojo.User">
		update user set username=#{username},birthday = #{birthday},sex = #{sex},address = #{address}
		where id = #{id}
	</update>
	
</mapper>